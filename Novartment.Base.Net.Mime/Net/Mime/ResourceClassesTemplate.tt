<#@ template debug="true" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.VisualStudio.Shell.Interop.8.0" #>
<#@ assembly name="EnvDTE" #>
<#@ assembly name="EnvDTE80" #>
<#@ assembly name="VSLangProj" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="Microsoft.VisualStudio.Shell.Interop" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="EnvDTE80" #>
<#@ import namespace="Microsoft.VisualStudio.TextTemplating" #>
<#
	var serviceProvider = Host as IServiceProvider;
	if (serviceProvider != null)
	{
		Dte = serviceProvider.GetService (typeof (SDTE)) as DTE;
	}

	// Fail if we couldn't get the DTE. This can happen when trying to run in TextTransform.exe
	if (Dte == null)
	{
		throw new Exception ("T4MVC can only execute through the Visual Studio host");
	}

	Project = GetProjectContainingT4File (Dte);

	if (Project == null)
	{
		Error ("Could not find the VS Project containing the T4 file.");
		return"XX";
	}
	
	 AppRoot = Path.GetDirectoryName (Project.FullName) + '\\';
	 RootNamespace = Project.Properties.Item ("RootNamespace").Value.ToString ();
#>
//------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Reflection;

<#
try
{
	AllEntries = new List<ResourceEntry> ();
	FindResourceFilesRecursivlyAndRecordEntries (Project.ProjectItems, "");
	AllEntries.Sort (new Comparison<ResourceEntry> ( (e1, e2) => (e1.Path + e1.File + e1.Name).CompareTo (e2.Path + e2.File + e2.Name)));

	var currentNamespace = "";
	var currentClass = "";
	var thisIsFirstEntryInClass = true;
	var names = new List<string> ();
	var currentClassEntries = new List<ResourceEntry> ();
	foreach (var entry in AllEntries)
	{
		//var newNamespace = (string.IsNullOrEmpty (entry.Path) ? "Resources." : ("Resources." + entry.Path + ".")).Replace (".Resources.", ".");
		var newNamespace = string.IsNullOrEmpty (entry.Path) ?
			RootNamespace :
			(RootNamespace + "." + entry.Path);
		if (!string.IsNullOrEmpty (entry.CustomNamespace))
			newNamespace = entry.CustomNamespace;
		var newClass = entry.File;

		bool namesapceIsChanging = newNamespace != currentNamespace;
		bool classIsChanging = namesapceIsChanging || newClass != currentClass;
		
		//Close out current class if class is changing and there is a current class
		if (classIsChanging && currentClass != "")
		{
			WriteLine ("\t}");
		}

		if (namesapceIsChanging)
		{
			//Close out current namespace if one exists
			if ( currentNamespace != "" )
				WriteLine ("}");

			currentNamespace = newNamespace;
			
			//open new namespace
			WriteLine (string.Format ("namespace {0}", currentNamespace));
			WriteLine ("{");

		}

		if (classIsChanging)
		{
			currentClassEntries.Clear ();
			currentClass = newClass;
			#>
	/// <summary>
	/// A strongly-typed resource class, for looking up localized strings, etc.
	/// </summary>
	// This class was auto-generated by the StronglyTypedResourceBuilder
	// class via a tool like ResGen or Visual Studio.
	// To add or remove a member, edit your .ResX file then rerun ResGen
	// with the /str option, or rebuild your VS project.
	[System.CodeDom.Compiler.GeneratedCodeAttribute ("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
	[System.Diagnostics.DebuggerNonUserCodeAttribute ()]
	[System.Runtime.CompilerServices.CompilerGeneratedAttribute ()]
<#
			WriteLine (string.Format ("\tpublic class {0}", currentClass));
			WriteLine ("\t{");
			thisIsFirstEntryInClass = true;

		// Emit code for the ResourceManager property and GetResourceString method for the current class
		#>
		private static Lazy<System.Resources.ResourceManager> _resourceMan = new Lazy<System.Resources.ResourceManager> (CreateResourceManager);

		[System.Diagnostics.CodeAnalysis.SuppressMessageAttribute ("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
		internal <#Write (currentClass);#> ()
		{
		}

		/// <summary>
		/// Returns the cached ResourceManager instance used by this class.
		/// </summary>
		[System.ComponentModel.EditorBrowsableAttribute (System.ComponentModel.EditorBrowsableState.Advanced)]
		private static System.Resources.ResourceManager CreateResourceManager ()
		{
			var template = "<#=
			string.IsNullOrEmpty (entry.Path) ?
			string.Format ("{0}.{1}{2}.resources", RootNamespace, entry.File, entry.Type) :
			string.Format ("{0}.{1}.{2}{3}.resources", RootNamespace, entry.Path, entry.File, entry.Type)
			#>";
			var assembly = typeof (<#=entry.File#>).GetTypeInfo ().Assembly;
			var names = assembly.GetManifestResourceNames ();
			string foundName = null;
			foreach (var name in names)
			{
				if (name.Equals (template, StringComparison.OrdinalIgnoreCase))
				{
					foundName = name;
					break;
				}
			}
			if (foundName == null)
			{
				foreach (var name in names)
				{
					if (name.EndsWith (template, StringComparison.OrdinalIgnoreCase))
					{
						foundName = name;
						break;
					}
				}
				if (foundName == null)
				{
					var template2 = "<#=string.Format ("{0}.resources", entry.File) #>";
					foreach (var name in names)
					{
						if (name.EndsWith (template2, StringComparison.OrdinalIgnoreCase))
						{
							foundName = name;
							break;
						}
					}
				}
			}
			if (foundName == null)
			{
				throw new InvalidOperationException (string.Format ("Resource with name '{0}' not found in assembly '{1}'.", template, assembly.GetName ().Name));
			}
			return new System.Resources.ResourceManager (foundName.Substring (0, foundName.Length - 10), assembly);
		}

		/// <summary>
		/// Returns the formatted resource string.
		/// </summary>
		[System.ComponentModel.EditorBrowsableAttribute (System.ComponentModel.EditorBrowsableState.Advanced)]
		private static string GetResourceString (string key)
		{
			return _resourceMan.Value.GetString (key);
		}
<#
		}

		//Emit the static resource string access method for the current entry
		if (entry.Comment != null)
		{
			if (!thisIsFirstEntryInClass) WriteLine ("");
			WriteLine (string.Format ("\r\n\t\t///<summary>\r\n\t\t///{0}\r\n\t\t///</summary>", entry.Comment.Replace ("\r\n", "\r\n\t\t///")));
		}
		else
		{
			WriteLine ("");
		}
		if (entry.Value.StartsWith ("HTML:"))
		{
			WriteLine (string.Format ("\t\tpublic static HtmlString {0} {{ get {{ return GetResourceHtmlString (\"{0}\"); }} }}", entry.Name));
		}
		else
		{
			WriteLine (string.Format ("\t\tpublic static string {0} {{ get {{ return GetResourceString (\"{0}\"); }} }}", entry.Name));
		}
		names.Add (entry.Name);
		currentClassEntries.Add (entry);

		thisIsFirstEntryInClass = false;
		
	} 

	//close out the current class when done
	if (currentClass != "")
	{
		WriteLine ("\t}");
	}
}
catch (Exception ex)
{
	Error (ex.ToString ());
}
#>
}
<#+
	const string Kind_PhysicalFolder = "{6BB5F8EF-4483-11D3-8BCF-00C04F8EC28C}";
	bool AlwaysKeepTemplateDirty = false;
	static DTE Dte;
	static Project Project;
	static string AppRoot;
	static string RootNamespace;
	static List<ResourceEntry> AllEntries;

void FindResourceFilesRecursivlyAndRecordEntries (ProjectItems items, string path)
{
	foreach (ProjectItem item in items)
	{
		if (Path.GetExtension (item.Name) == ".resx")
		{
			RecordEntriesInResourceFile (item, path);
		}
		if (item.Kind == Kind_PhysicalFolder)
		{
			FindResourceFilesRecursivlyAndRecordEntries (item.ProjectItems, path+"."+item.Name);
		}
	}
}

void RecordEntriesInResourceFile (ProjectItem item, string path)
{
	//skip resource files except those for the default culture
	if (Regex.IsMatch (item.Name, @".*\.[a-zA-z]{2}(-[a-zA-z]{2})?\.resx"))
	{
		return;
	}

	var filePath = (string)item.Properties.Item ("FullPath").Value;
	var customNamespace = (string)item.Properties.Item ("CustomToolNamespace").Value;
	var xml = new XmlDocument ();
	xml.Load (filePath);
	var entries = xml.DocumentElement.SelectNodes ("//data");

	var parentFile = item.Name.Replace (".resx", "");
	var fileType = Path.GetExtension (parentFile);
	if (fileType != null && fileType != "")
	{
		parentFile = parentFile.Replace (fileType, "");
	}

	foreach (XmlElement entryElement in entries)
	{
		var entry = new ResourceEntry
		{
			Path = string.IsNullOrEmpty (path) ? "" : path.Substring (1),
			File = MakeIntoValidIdentifier (parentFile),
			Type = fileType,
			Name = MakeIntoValidIdentifier (entryElement.Attributes["name"].Value),
			CustomNamespace = customNamespace,
		};
		var valueElement = entryElement.SelectSingleNode ("value");
		if (valueElement != null)
		{
			entry.Value = valueElement.InnerText;
		}
		var commentElement = entryElement.SelectSingleNode ("comment");
		if (commentElement != null)
		{
			entry.Comment = commentElement.InnerText;
		}

		AllEntries.Add (entry);
	}
}

string MakeIntoValidIdentifier (string arbitraryString)
{
	var validIdentifier = Regex.Replace (arbitraryString, @"[^A-Za-z0-9-._]", " ");
	validIdentifier = ConvertToPascalCase (validIdentifier);
	if (Regex.IsMatch (validIdentifier, @"^\d")) validIdentifier = "_" + validIdentifier;
	return validIdentifier;
}

string ConvertToPascalCase (string phrase)
{
	string[] splittedPhrase = phrase.Split (' ', '-', '.');
	var sb = new StringBuilder ();

	sb = new StringBuilder ();

	foreach (String s in splittedPhrase)
	{
		char[] splittedPhraseChars = s.ToCharArray ();
		if (splittedPhraseChars.Length > 0)
		{
			splittedPhraseChars[0] = ((new String (splittedPhraseChars[0], 1)).ToUpper ().ToCharArray ())[0];
		}
		sb.Append (new String (splittedPhraseChars));
	}
	return sb.ToString ();
}

Project GetProjectContainingT4File (DTE dte)
{
	// Find the .tt file's ProjectItem
	ProjectItem projectItem = dte.Solution.FindProjectItem (Host.TemplateFile);

	// If the .tt file is not opened, open it
	if (projectItem.Document == null)
		projectItem.Open (Constants.vsViewKindCode);

	if (AlwaysKeepTemplateDirty)
	{
		// Mark the .tt file as unsaved. This way it will be saved and update itself next time the
		// project is built. Basically, it keeps marking itself as unsaved to make the next build work.
		// Note: this is certainly hacky, but is the best I could come up with so far.
		projectItem.Document.Saved = false;
	}

	return projectItem.ContainingProject;
}

struct ResourceEntry
{
	public string Path { get; set; }
	public string File { get; set; }
	public string Type { get; set; }
	public string CustomNamespace { get; set; }
	public string Name { get; set; }
	public string Value { get; set; }
	public string Comment { get; set; }
}
#>